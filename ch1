;; I came across the site www.teachyourselfcs.com which gives a structured path to a self-taught computer science education
;;; They recommnd as a first step, working through the first three chapters of Structure and Interpretations of Computer Programs
;;; This is a documentation of my journey through the text.


;; Exercise 1.1
;; Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented
;; The answers are on the same line as the expression after the semicolon i.e. as comments

10 ;; 10

(+ 5 4 3) ;; 12

(- 9 1) ;; 8

(/ 6 2) ;; 3

(+ (* 2 4) (- 4 6)) ;; 6

(define a 3) ;; a = 3

(define b (+ a 1)) ;; b = 3+1 (4)

(+ a b (* a b)) ;; (3 + 4 + (3*4)) -> 7 + 12 -> 19

(= a b) ;; this expression evaluates as false

(if (and  (> b a) (< b (* a b))) b a) ;; if b is greater than a and b is less than the product of a and b, return b else return a... the predicate evaluates to true hence it returns b which is 4

(cond ((= a 4) 6) ((= b 4) (+ 6 7 a)) (else 25)) ;; second predicate is true hence returns its consequent (6 + 7 + 3) -> 16

(+ 2 (if (> b a) b a)) ;; the predicate is true hence b i.e. (4) is returned whose sum with 2 is 6

(* (cond ((> a b) a) ((< a b) b) (else -1)) (+ a 1)) ;; In the first operand the second predicate evaluates to true hence 4 is returned from this expression which is multiplied by the result of the second expression (3+1) -> 4, hence the result is 4*4 -> 16

;;Exercise 1.2
;; Translate the following expression into prefix form

(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7))) ;; evaluates to -37/150 or -0.246666666

;; Exercise 1.3
;; Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers


;; Step 1 define the square procedure as below
(define (square x) (* x x))

;; Step 2 is to define the sum of squares procedure as below
(define (sum-squares x y) (+ (square x) (square y)))


;; Step 3 is to define the procedure to determine the larger of two numbers as follows: using the if conditional check whether the first number is larger than the second, if yes, return the first if not return the second, then check whether the second number is larger than the third, if yes, return the second number if not return the third. This will give you the larger two numbers.

(define (sum-larger-squares a b c) (sum-squares (if (> a b) a b) (if (> b c) b c)))


;; Exercise 1.4
;; Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure

(define (a-plus-abs-b a b) ((if (> b 0) + -) a b))

;; Here, the if expression checks whether b is positive or negativeand returns the operator '+' if positive and the operator '-' if negative, this is then applied to the operands a and b



;; Exercise 1.5
;; Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with  is using applicative-order or normal-order evaluation. He defines the following two procedures:

(define (p) (p))

(define (test x y) (if (= x 0) 0 y))

;; Then he evaluates the expression 

(test 0 (p))

;; What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that use normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form 'if' is the same whether the interpreter is using normal or applicative order: Thepredicate expression is evaluated first, and the result determines whether to evaluate te consequent or the alternative expression)

;; Answer: If the interpreter uses normal-order evaluation, it will return 0 as the answer since it will evaluate the operands of (test x y) i.e. (test 0 (p)) it will first check whether x i.e. 0 is equal to 0 if true it will return 0 if false it will return y i.e. (p) which will call itself recursively. In this case x == 0 hence there will be no need to evaluate y i.e. (p). If it was applicative-order evaluation, the expression (test 0 (p)) will enter an infinite loop since both x==0 and y==(p) will have to be evaluated.


